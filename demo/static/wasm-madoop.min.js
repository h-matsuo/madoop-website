let execEmit=()=>{throw new Error("[Madoop] function `execEmit` not defined.")};(()=>{const e="undefined"==typeof MADOOP_SERVER_ENDPOINT_URL?"http://localhost:3000/madoop":MADOOP_SERVER_ENDPOINT_URL,t="undefined"==typeof MADOOP_PING_INTERVAL?1e3:MADOOP_PING_INTERVAL,a=e=>{"undefined"!=typeof MADOOP_MODE_DEBUG&&console.log(`[${(new Date).toISOString()}] [INFO] - ${e}`)},n=async e=>(a(`[GET] ${e}`),fetch(e,{method:"GET",headers:new Headers({Pragma:"no-cache","Cache-Control":"no-cache"})})),o=async(e,t)=>(a(`[POST] ${e}`),fetch(e,{method:"POST",body:JSON.stringify(t),headers:new Headers({"Content-Type":"application/json"})})),i=async e=>new Promise((t,a)=>{setTimeout(()=>{t()},e)}),s=new Map,r=async t=>{const a=JSON.stringify(t);if(s.has(a))return s.get(a);const o=await n(`${e}/wasmData/${t.phase}`).then(e=>e.json());let i;if((e=>{const t=document.createElement("script");t.text=e,document.head.appendChild(t).parentNode.removeChild(t)})(o.wasmJs),"map"===t.phase)await new Promise((e,t)=>{let a;const n={wasmBinary:new Uint8Array(o.wasmBinary.data),onRuntimeInitialized:()=>{i=a.cwrap("map",null,["string"]),e()}};a=Module(n)});else{if("reduce"!==t.phase)throw new Error(`[Madoop] invalid task phase provided: ${t.phase}`);await new Promise((e,t)=>{let a;const n={wasmBinary:new Uint8Array(o.wasmBinary.data),onRuntimeInitialized:()=>{i=a.cwrap("reduce",null,["string","string"]),e()}};a=Module(n)})}return s.set(a,i),i};(async()=>{for(;;){const a=await n(`${e}/tasks/next`).then(e=>e.json());if(null===a.metaInfo){await i(t);continue}const s=await r(a.metaInfo),d=[];if(execEmit=((e,t)=>{const a={key:e,value:t};d.push(a)}),"map"===a.metaInfo.phase)s(a.inputData);else{if("reduce"!==a.metaInfo.phase)throw new Error(`[Madoop] invalid task id provided: ${a.metaInfo.phase}`);JSON.parse(a.inputData).forEach(e=>{s(e.key,e.values.toString())})}const c={metaInfo:JSON.stringify(a.metaInfo),result:JSON.stringify(d)};await o(`${e}/tasks/result`,c)}})()})();